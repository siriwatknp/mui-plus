{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-prompt-input",
  "type": "registry:item",
  "title": "Ai Prompt Input",
  "description": "A ai-prompt-input item.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-prompt-input/ai-prompt-input.demo.tsx",
      "target": "src/mui-plus/components/ai-prompt-input/ai-prompt-input.demo.tsx",
      "content": "\"use client\";\n\nimport {\n  PromptInput,\n  PromptInputTextarea,\n  PromptInputToolbar,\n  PromptInputTools,\n  PromptInputButton,\n  PromptInputSubmit,\n} from \"./ai-prompt-input\";\nimport { PaperclipIcon, ImageIcon, MicIcon } from \"lucide-react\";\n\nexport default function AIPromptInputDemo() {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    console.log(\"Message:\", formData.get(\"message\"));\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto space-y-8 p-8\">\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Basic Prompt Input\n        </h3>\n        <PromptInput onSubmit={handleSubmit}>\n          <PromptInputTextarea placeholder=\"Ask me anything...\" />\n          <PromptInputToolbar>\n            <PromptInputTools>\n              <PromptInputButton onClick={() => console.log(\"Attach\")}>\n                <PaperclipIcon className=\"size-4\" />\n              </PromptInputButton>\n              <PromptInputButton onClick={() => console.log(\"Image\")}>\n                <ImageIcon className=\"size-4\" />\n              </PromptInputButton>\n            </PromptInputTools>\n            <PromptInputSubmit />\n          </PromptInputToolbar>\n        </PromptInput>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          With Additional Tools\n        </h3>\n        <PromptInput onSubmit={handleSubmit}>\n          <PromptInputTextarea placeholder=\"Type your message here...\" />\n          <PromptInputToolbar>\n            <PromptInputTools>\n              <PromptInputButton onClick={() => console.log(\"Attach\")}>\n                <PaperclipIcon className=\"size-4\" />\n                <span className=\"text-xs\">Attach</span>\n              </PromptInputButton>\n              <PromptInputButton onClick={() => console.log(\"Image\")}>\n                <ImageIcon className=\"size-4\" />\n                <span className=\"text-xs\">Image</span>\n              </PromptInputButton>\n              <PromptInputButton onClick={() => console.log(\"Voice\")}>\n                <MicIcon className=\"size-4\" />\n                <span className=\"text-xs\">Voice</span>\n              </PromptInputButton>\n            </PromptInputTools>\n            <PromptInputSubmit />\n          </PromptInputToolbar>\n        </PromptInput>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Loading State\n        </h3>\n        <PromptInput onSubmit={handleSubmit}>\n          <PromptInputTextarea placeholder=\"Processing...\" disabled />\n          <PromptInputToolbar>\n            <PromptInputTools>\n              <PromptInputButton disabled>\n                <PaperclipIcon className=\"size-4\" />\n              </PromptInputButton>\n            </PromptInputTools>\n            <PromptInputSubmit status=\"streaming\" disabled />\n          </PromptInputToolbar>\n        </PromptInput>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-prompt-input/ai-prompt-input.tsx",
      "target": "src/mui-plus/components/ai-prompt-input/ai-prompt-input.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport type { ChatStatus } from \"ai\";\nimport { Loader2Icon, SendIcon, SquareIcon, XIcon } from \"lucide-react\";\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from \"react\";\nimport { Children } from \"react\";\n\nexport type PromptInputProps = HTMLAttributes<HTMLFormElement>;\n\nexport const PromptInput = ({ className, ...props }: PromptInputProps) => (\n  <form\n    className={cn(\n      \"w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\n\nexport const PromptInputTextarea = ({\n  onChange,\n  className,\n  placeholder = \"What would you like to know?\",\n  minHeight = 48,\n  maxHeight = 164,\n  ...props\n}: PromptInputTextareaProps) => {\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === \"Enter\") {\n      // Don't submit if IME composition is in progress\n      if (e.nativeEvent.isComposing) {\n        return;\n      }\n\n      if (e.shiftKey) {\n        // Allow newline\n        return;\n      }\n\n      // Submit on Enter (without Shift)\n      e.preventDefault();\n      const form = e.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      className={cn(\n        \"w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0\",\n        \"field-sizing-content max-h-[6lh] bg-transparent dark:bg-transparent\",\n        \"focus-visible:ring-0\",\n        className,\n      )}\n      name=\"message\"\n      onChange={(e) => {\n        onChange?.(e);\n      }}\n      onKeyDown={handleKeyDown}\n      placeholder={placeholder}\n      {...props}\n    />\n  );\n};\n\nexport type PromptInputToolbarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const PromptInputToolbar = ({\n  className,\n  ...props\n}: PromptInputToolbarProps) => (\n  <div\n    className={cn(\"flex items-center justify-between p-1\", className)}\n    {...props}\n  />\n);\n\nexport type PromptInputToolsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const PromptInputTools = ({\n  className,\n  ...props\n}: PromptInputToolsProps) => (\n  <div\n    className={cn(\n      \"flex items-center gap-1\",\n      \"[&_button:first-child]:rounded-bl-xl\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputButtonProps = ComponentProps<typeof Button>;\n\nexport const PromptInputButton = ({\n  variant = \"ghost\",\n  className,\n  size,\n  ...props\n}: PromptInputButtonProps) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? \"default\" : \"icon\";\n\n  return (\n    <Button\n      className={cn(\n        \"shrink-0 gap-1.5 rounded-lg\",\n        variant === \"ghost\" && \"text-muted-foreground\",\n        newSize === \"default\" && \"px-3\",\n        className,\n      )}\n      size={newSize}\n      type=\"button\"\n      variant={variant}\n      {...props}\n    />\n  );\n};\n\nexport type PromptInputSubmitProps = ComponentProps<typeof Button> & {\n  status?: ChatStatus;\n};\n\nexport const PromptInputSubmit = ({\n  className,\n  variant = \"default\",\n  size = \"icon\",\n  status,\n  children,\n  ...props\n}: PromptInputSubmitProps) => {\n  let Icon = <SendIcon className=\"size-4\" />;\n\n  if (status === \"submitted\") {\n    Icon = <Loader2Icon className=\"size-4 animate-spin\" />;\n  } else if (status === \"streaming\") {\n    Icon = <SquareIcon className=\"size-4\" />;\n  } else if (status === \"error\") {\n    Icon = <XIcon className=\"size-4\" />;\n  }\n\n  return (\n    <Button\n      className={cn(\"gap-1.5 rounded-lg\", className)}\n      size={size}\n      type=\"submit\"\n      variant={variant}\n      {...props}\n    >\n      {children ?? Icon}\n    </Button>\n  );\n};\n\nexport type PromptInputModelSelectProps = ComponentProps<typeof Select>;\n\nexport const PromptInputModelSelect = (props: PromptInputModelSelectProps) => (\n  <Select {...props} />\n);\n\nexport type PromptInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nexport const PromptInputModelSelectTrigger = ({\n  className,\n  ...props\n}: PromptInputModelSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      \"border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors\",\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className,\n    )}\n    {...props}\n  />\n);\n\nexport type PromptInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nexport const PromptInputModelSelectContent = ({\n  className,\n  ...props\n}: PromptInputModelSelectContentProps) => (\n  <SelectContent className={cn(className)} {...props} />\n);\n\nexport type PromptInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const PromptInputModelSelectItem = ({\n  className,\n  ...props\n}: PromptInputModelSelectItemProps) => (\n  <SelectItem className={cn(className)} {...props} />\n);\n\nexport type PromptInputModelSelectValueProps = ComponentProps<\n  typeof SelectValue\n>;\n\nexport const PromptInputModelSelectValue = ({\n  className,\n  ...props\n}: PromptInputModelSelectValueProps) => (\n  <SelectValue className={cn(className)} {...props} />\n);\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-prompt-input.png",
    "category": "ai"
  }
}