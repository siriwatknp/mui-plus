{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-web-preview",
  "type": "registry:item",
  "title": "Ai Web Preview",
  "description": "A ai-web-preview item.",
  "dependencies": [
    "@mui/material",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-web-preview/ai-web-preview.demo.tsx",
      "target": "src/mui-plus/components/ai-web-preview/ai-web-preview.demo.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  WebPreview,\n  WebPreviewNavigation,\n  WebPreviewNavigationButton,\n  WebPreviewUrl,\n  WebPreviewBody,\n  WebPreviewConsole,\n} from \"./ai-web-preview\";\nimport { RefreshCwIcon, ArrowLeftIcon, ArrowRightIcon } from \"lucide-react\";\n\nexport default function AIWebPreviewDemo() {\n  const consoleLogs = [\n    {\n      level: \"log\" as const,\n      message: \"Application started\",\n      timestamp: new Date(),\n    },\n    {\n      level: \"warn\" as const,\n      message: \"Deprecated API usage detected\",\n      timestamp: new Date(),\n    },\n    {\n      level: \"error\" as const,\n      message: \"Failed to fetch data\",\n      timestamp: new Date(),\n    },\n  ];\n\n  return (\n    <Box sx={{ width: \"100%\", maxWidth: 896, mx: \"auto\", p: 4 }}>\n      <Box>\n        <Typography\n          variant=\"body2\"\n          sx={{ fontWeight: 500, color: \"text.secondary\", mb: 1 }}\n        >\n          Web Preview Component\n        </Typography>\n        <Typography variant=\"body2\" sx={{ color: \"text.secondary\", mb: 2 }}>\n          Embed and preview web content with navigation controls.\n        </Typography>\n\n        <Box sx={{ height: 500 }}>\n          <WebPreview defaultUrl=\"https://example.com\">\n            <WebPreviewNavigation>\n              <WebPreviewNavigationButton tooltip=\"Back\">\n                <ArrowLeftIcon size={16} />\n              </WebPreviewNavigationButton>\n              <WebPreviewNavigationButton tooltip=\"Forward\">\n                <ArrowRightIcon size={16} />\n              </WebPreviewNavigationButton>\n              <WebPreviewNavigationButton tooltip=\"Refresh\">\n                <RefreshCwIcon size={16} />\n              </WebPreviewNavigationButton>\n              <WebPreviewUrl sx={{ flex: 1 }} />\n            </WebPreviewNavigation>\n            <WebPreviewBody />\n            <WebPreviewConsole logs={consoleLogs} />\n          </WebPreview>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-web-preview/ai-web-preview.tsx",
      "target": "src/mui-plus/components/ai-web-preview/ai-web-preview.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport IconButton from \"@mui/material/IconButton\";\nimport TextField from \"@mui/material/TextField\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Typography from \"@mui/material/Typography\";\nimport Collapse from \"@mui/material/Collapse\";\nimport type { SxProps, Theme } from \"@mui/material/styles\";\nimport { ChevronDownIcon } from \"lucide-react\";\nimport type { ReactNode } from \"react\";\nimport { createContext, useContext, useState } from \"react\";\n\nexport type WebPreviewContextValue = {\n  url: string;\n  setUrl: (url: string) => void;\n  consoleOpen: boolean;\n  setConsoleOpen: (open: boolean) => void;\n};\n\nconst WebPreviewContext = createContext<WebPreviewContextValue | null>(null);\n\nconst useWebPreview = () => {\n  const context = useContext(WebPreviewContext);\n  if (!context) {\n    throw new Error(\"WebPreview components must be used within a WebPreview\");\n  }\n  return context;\n};\n\nexport type WebPreviewProps = {\n  defaultUrl?: string;\n  onUrlChange?: (url: string) => void;\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreview = ({\n  children,\n  defaultUrl = \"\",\n  onUrlChange,\n  sx,\n}: WebPreviewProps) => {\n  const [url, setUrl] = useState(defaultUrl);\n  const [consoleOpen, setConsoleOpen] = useState(false);\n\n  const handleUrlChange = (newUrl: string) => {\n    setUrl(newUrl);\n    onUrlChange?.(newUrl);\n  };\n\n  const contextValue: WebPreviewContextValue = {\n    url,\n    setUrl: handleUrlChange,\n    consoleOpen,\n    setConsoleOpen,\n  };\n\n  return (\n    <WebPreviewContext.Provider value={contextValue}>\n      <Box\n        sx={{\n          display: \"flex\",\n          width: \"100%\",\n          height: \"100%\",\n          flexDirection: \"column\",\n          borderRadius: 2,\n          border: 1,\n          borderColor: \"divider\",\n          bgcolor: \"background.paper\",\n          ...sx,\n        }}\n      >\n        {children}\n      </Box>\n    </WebPreviewContext.Provider>\n  );\n};\n\nexport type WebPreviewNavigationProps = {\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreviewNavigation = ({\n  children,\n  sx,\n}: WebPreviewNavigationProps) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      alignItems: \"center\",\n      gap: 0.5,\n      borderBottom: 1,\n      borderColor: \"divider\",\n      p: 1,\n      ...sx,\n    }}\n  >\n    {children}\n  </Box>\n);\n\nexport type WebPreviewNavigationButtonProps = {\n  onClick?: () => void;\n  disabled?: boolean;\n  tooltip?: string;\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreviewNavigationButton = ({\n  onClick,\n  disabled,\n  tooltip,\n  children,\n  sx,\n}: WebPreviewNavigationButtonProps) => {\n  const button = (\n    <IconButton\n      disabled={disabled}\n      onClick={onClick}\n      size=\"small\"\n      sx={{\n        width: 32,\n        height: 32,\n        \"&:hover\": {\n          color: \"text.primary\",\n        },\n        ...sx,\n      }}\n    >\n      {children}\n    </IconButton>\n  );\n\n  return tooltip ? <Tooltip title={tooltip}>{button}</Tooltip> : button;\n};\n\nexport type WebPreviewUrlProps = {\n  value?: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreviewUrl = ({\n  value,\n  onChange,\n  onKeyDown,\n  sx,\n}: WebPreviewUrlProps) => {\n  const { url, setUrl } = useWebPreview();\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      const target = event.target as HTMLInputElement;\n      setUrl(target.value);\n    }\n    onKeyDown?.(event);\n  };\n\n  return (\n    <TextField\n      size=\"small\"\n      variant=\"outlined\"\n      placeholder=\"Enter URL...\"\n      value={value ?? url}\n      onChange={onChange}\n      onKeyDown={handleKeyDown}\n      sx={{\n        flex: 1,\n        \"& .MuiInputBase-root\": {\n          height: 32,\n          fontSize: \"0.875rem\",\n        },\n        ...sx,\n      }}\n    />\n  );\n};\n\nexport type WebPreviewBodyProps = {\n  loading?: ReactNode;\n  src?: string;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreviewBody = ({ loading, src, sx }: WebPreviewBodyProps) => {\n  const { url } = useWebPreview();\n\n  return (\n    <Box sx={{ flex: 1, ...sx }}>\n      <Box\n        component=\"iframe\"\n        sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-presentation\"\n        src={(src ?? url) || undefined}\n        title=\"Preview\"\n        sx={{\n          width: \"100%\",\n          height: \"100%\",\n          border: \"none\",\n        }}\n      />\n      {loading}\n    </Box>\n  );\n};\n\nexport type WebPreviewConsoleProps = {\n  logs?: Array<{\n    level: \"log\" | \"warn\" | \"error\";\n    message: string;\n    timestamp: Date;\n  }>;\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n};\n\nexport const WebPreviewConsole = ({\n  logs = [],\n  children,\n  sx,\n}: WebPreviewConsoleProps) => {\n  const { consoleOpen, setConsoleOpen } = useWebPreview();\n\n  return (\n    <Box\n      sx={{\n        borderTop: 1,\n        borderColor: \"divider\",\n        fontFamily: \"monospace\",\n        fontSize: \"0.875rem\",\n        ...sx,\n      }}\n    >\n      <Button\n        fullWidth\n        disableRipple\n        variant=\"text\"\n        onClick={() => setConsoleOpen(!consoleOpen)}\n        sx={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          textAlign: \"left\",\n          fontWeight: 500,\n          borderRadius: 0,\n          px: 2,\n          \"&:hover, &:active\": {\n            bgcolor: \"transparent\",\n          },\n          \"&:active\": {\n            transform: \"none\",\n          },\n        }}\n        endIcon={\n          <Box\n            component={ChevronDownIcon}\n            size={16}\n            sx={{\n              transition: \"transform 0.2s\",\n              transform: consoleOpen ? \"rotate(180deg)\" : \"rotate(0deg)\",\n            }}\n          />\n        }\n      >\n        Console\n      </Button>\n      <Collapse in={consoleOpen}>\n        <Box sx={{ px: 2, pb: 2 }}>\n          <Box\n            sx={{\n              maxHeight: 192,\n              overflowY: \"auto\",\n              \"& > *:not(:last-child)\": {\n                mb: 0.5,\n              },\n            }}\n          >\n            {logs.length === 0 ? (\n              <Typography sx={{ color: \"text.secondary\" }}>\n                No console output\n              </Typography>\n            ) : (\n              logs.map((log, index) => (\n                <Box\n                  key={`${log.timestamp.getTime()}-${index}`}\n                  sx={{\n                    fontSize: \"0.75rem\",\n                    color:\n                      log.level === \"error\"\n                        ? \"error.main\"\n                        : log.level === \"warn\"\n                          ? \"warning.main\"\n                          : \"text.primary\",\n                  }}\n                >\n                  <Box component=\"span\" sx={{ color: \"text.secondary\" }}>\n                    {log.timestamp.toLocaleTimeString()}\n                  </Box>{\" \"}\n                  {log.message}\n                </Box>\n              ))\n            )}\n            {children}\n          </Box>\n        </Box>\n      </Collapse>\n    </Box>\n  );\n};\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-web-preview.png",
    "category": "ai"
  }
}