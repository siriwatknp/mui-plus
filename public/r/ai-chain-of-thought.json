{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-chain-of-thought",
  "type": "registry:item",
  "title": "AI Chain of Thought",
  "description": "Component for displaying AI reasoning steps with collapsible content",
  "dependencies": ["@mui/material", "@emotion/react", "@emotion/styled"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-chain-of-thought/ai-chain-of-thought.tsx",
      "target": "src/mui-plus/components/ai-chain-of-thought.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  BrainIcon,\n  ChevronDownIcon,\n  DotIcon,\n  type LucideIcon,\n} from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { createContext, memo, useContext, useState } from \"react\";\n\ntype ChainOfThoughtContextValue = {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n};\n\nconst ChainOfThoughtContext = createContext<ChainOfThoughtContextValue | null>(\n  null,\n);\n\nconst useChainOfThought = () => {\n  const context = useContext(ChainOfThoughtContext);\n  if (!context) {\n    throw new Error(\n      \"ChainOfThought components must be used within ChainOfThought\",\n    );\n  }\n  return context;\n};\n\nexport type ChainOfThoughtProps = ComponentProps<typeof Box> & {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nexport const ChainOfThought = memo(\n  ({\n    open,\n    defaultOpen = false,\n    onOpenChange,\n    children,\n    sx,\n    ...props\n  }: ChainOfThoughtProps) => {\n    const [isOpen, setIsOpen] = useState(open ?? defaultOpen);\n\n    const handleOpenChange = (newOpen: boolean) => {\n      setIsOpen(newOpen);\n      onOpenChange?.(newOpen);\n    };\n\n    return (\n      <ChainOfThoughtContext.Provider\n        value={{ isOpen, setIsOpen: handleOpenChange }}\n      >\n        <Box\n          sx={{\n            maxWidth: \"65ch\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 2,\n            ...sx,\n          }}\n          {...props}\n        >\n          {children}\n        </Box>\n      </ChainOfThoughtContext.Provider>\n    );\n  },\n);\n\nexport type ChainOfThoughtHeaderProps = ComponentProps<typeof Box>;\n\nexport const ChainOfThoughtHeader = memo(\n  ({ children, sx, ...props }: ChainOfThoughtHeaderProps) => {\n    const { isOpen, setIsOpen } = useChainOfThought();\n\n    return (\n      <Box\n        onClick={() => setIsOpen(!isOpen)}\n        sx={{\n          display: \"flex\",\n          width: \"100%\",\n          alignItems: \"center\",\n          gap: 1,\n          color: \"text.secondary\",\n          fontSize: \"0.875rem\",\n          transition: \"color 0.2s\",\n          cursor: \"pointer\",\n          \"&:hover\": {\n            color: \"text.primary\",\n          },\n          ...sx,\n        }}\n        {...props}\n      >\n        <BrainIcon className=\"size-4\" />\n        <Box sx={{ flex: 1, textAlign: \"left\" }}>\n          {children ?? \"Chain of Thought\"}\n        </Box>\n        <ChevronDownIcon\n          className=\"size-4\"\n          style={{\n            transform: isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\",\n            transition: \"transform 0.2s\",\n          }}\n        />\n      </Box>\n    );\n  },\n);\n\nexport type ChainOfThoughtStepProps = ComponentProps<typeof Box> & {\n  icon?: LucideIcon;\n  label: string;\n  description?: string;\n  status?: \"complete\" | \"active\" | \"pending\";\n};\n\nexport const ChainOfThoughtStep = memo(\n  ({\n    icon: Icon = DotIcon,\n    label,\n    description,\n    status = \"complete\",\n    children,\n    sx,\n    ...props\n  }: ChainOfThoughtStepProps) => {\n    const statusColors = {\n      complete: \"text.secondary\",\n      active: \"text.primary\",\n      pending: \"text.disabled\",\n    };\n\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          gap: 1,\n          fontSize: \"0.875rem\",\n          color: statusColors[status],\n          ...sx,\n        }}\n        {...props}\n      >\n        <Box sx={{ position: \"relative\", mt: 0.25 }}>\n          <Icon className=\"size-4\" />\n          <Box\n            sx={{\n              position: \"absolute\",\n              top: 3.5,\n              bottom: 0,\n              left: \"50%\",\n              width: 1,\n              bgcolor: \"divider\",\n              transform: \"translateX(-50%)\",\n            }}\n          />\n        </Box>\n        <Box sx={{ flex: 1, display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n          <Typography variant=\"body2\">{label}</Typography>\n          {description && (\n            <Typography\n              variant=\"caption\"\n              sx={{ color: \"text.secondary\", display: \"block\" }}\n            >\n              {description}\n            </Typography>\n          )}\n          {children}\n        </Box>\n      </Box>\n    );\n  },\n);\n\nexport type ChainOfThoughtSearchResultsProps = ComponentProps<typeof Box>;\n\nexport const ChainOfThoughtSearchResults = memo(\n  ({ sx, ...props }: ChainOfThoughtSearchResultsProps) => (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: 1,\n        flexWrap: \"wrap\",\n        ...sx,\n      }}\n      {...props}\n    />\n  ),\n);\n\nexport type ChainOfThoughtSearchResultProps = ComponentProps<typeof Chip>;\n\nexport const ChainOfThoughtSearchResult = memo(\n  ({ sx, ...props }: ChainOfThoughtSearchResultProps) => (\n    <Chip\n      size=\"small\"\n      variant=\"outlined\"\n      sx={{\n        height: 24,\n        fontSize: \"0.75rem\",\n        fontWeight: 400,\n        ...sx,\n      }}\n      {...props}\n    />\n  ),\n);\n\nexport type ChainOfThoughtContentProps = ComponentProps<typeof Box>;\n\nexport const ChainOfThoughtContent = memo(\n  ({ children, sx, ...props }: ChainOfThoughtContentProps) => {\n    const { isOpen } = useChainOfThought();\n\n    return (\n      <Collapse in={isOpen}>\n        <Box\n          sx={{\n            mt: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: 1.5,\n            ...sx,\n          }}\n          {...props}\n        >\n          {children}\n        </Box>\n      </Collapse>\n    );\n  },\n);\n\nexport type ChainOfThoughtImageProps = ComponentProps<typeof Box> & {\n  caption?: string;\n};\n\nexport const ChainOfThoughtImage = memo(\n  ({ children, caption, sx, ...props }: ChainOfThoughtImageProps) => (\n    <Box\n      sx={{\n        mt: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 1,\n        ...sx,\n      }}\n      {...props}\n    >\n      <Box\n        sx={{\n          position: \"relative\",\n          display: \"flex\",\n          maxHeight: \"22rem\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          overflow: \"hidden\",\n          borderRadius: 2,\n          bgcolor: \"action.hover\",\n          p: 1.5,\n        }}\n      >\n        {children}\n      </Box>\n      {caption && (\n        <Typography variant=\"caption\" sx={{ color: \"text.secondary\" }}>\n          {caption}\n        </Typography>\n      )}\n    </Box>\n  ),\n);\n\nChainOfThought.displayName = \"ChainOfThought\";\nChainOfThoughtHeader.displayName = \"ChainOfThoughtHeader\";\nChainOfThoughtStep.displayName = \"ChainOfThoughtStep\";\nChainOfThoughtSearchResults.displayName = \"ChainOfThoughtSearchResults\";\nChainOfThoughtSearchResult.displayName = \"ChainOfThoughtSearchResult\";\nChainOfThoughtContent.displayName = \"ChainOfThoughtContent\";\nChainOfThoughtImage.displayName = \"ChainOfThoughtImage\";\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-chain-of-thought.png",
    "category": "ai"
  }
}
