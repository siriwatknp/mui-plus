{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-history-chart",
  "type": "registry:item",
  "title": "Payment History Chart",
  "description": "A payment-history-chart block.",
  "dependencies": [
    "@mui/material",
    "@mui/x-charts",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "blocks/payment-history-chart/payment-history-chart.tsx",
      "target": "src/mui-plus/blocks/payment-history-chart/payment-history-chart.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport Typography from \"@mui/material/Typography\";\nimport { LineChart } from \"@mui/x-charts/LineChart\";\n\nconst chartData = [\n  { date: \"Feb 1\", value: 3800 },\n  { date: \"Feb 5\", value: 3200 },\n  { date: \"Feb 8\", value: 3900 },\n  { date: \"Feb 11\", value: 3900 },\n  { date: \"Feb 15\", value: 4251 },\n  { date: \"Feb 18\", value: 5100 },\n  { date: \"Feb 22\", value: 4800 },\n  { date: \"Feb 25\", value: 4800 },\n  { date: \"Feb 28\", value: 5200 },\n];\n\nexport default function PaymentHistoryChart() {\n  const [period, setPeriod] = React.useState(\"1M\");\n\n  const handlePeriodChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newPeriod: string | null\n  ) => {\n    if (newPeriod !== null) {\n      setPeriod(newPeriod);\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            mb: 3,\n          }}\n        >\n          <Typography variant=\"h6\" component=\"h2\">\n            Payment History\n          </Typography>\n          <ToggleButtonGroup\n            value={period}\n            exclusive\n            onChange={handlePeriodChange}\n            aria-label=\"time period selection\"\n            size=\"small\"\n          >\n            <ToggleButton value=\"1M\" aria-label=\"1 month\">\n              1M\n            </ToggleButton>\n            <ToggleButton value=\"3M\" aria-label=\"3 months\">\n              3M\n            </ToggleButton>\n            <ToggleButton value=\"6M\" aria-label=\"6 months\">\n              6M\n            </ToggleButton>\n            <ToggleButton value=\"1Y\" aria-label=\"1 year\">\n              1Y\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n\n        <Stack spacing={0.5} sx={{ mb: 3 }}>\n          <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\n            $12,135.69\n          </Typography>\n          <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n            <Chip\n              label=\"+23%\"\n              size=\"small\"\n              variant=\"filled\"\n              color=\"success\"\n              sx={{\n                height: 24,\n                fontSize: \"0.875rem\",\n                fontWeight: 500,\n              }}\n            />\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              vs last month\n            </Typography>\n          </Box>\n        </Stack>\n\n        <Box sx={{ position: \"relative\" }}>\n          <LineChart\n            xAxis={[\n              {\n                data: chartData.map((_, index) => index),\n                valueFormatter: (value: number) => {\n                  const labels = [\n                    \"Feb 1\",\n                    \"Feb 8\",\n                    \"Feb 15\",\n                    \"Feb 22\",\n                    \"Feb 28\",\n                  ];\n                  const step = Math.floor(\n                    (value * labels.length) / chartData.length\n                  );\n                  return labels[Math.min(step, labels.length - 1)] || \"\";\n                },\n                tickNumber: 5,\n                position: \"bottom\",\n              },\n            ]}\n            yAxis={[\n              {\n                position: \"none\",\n              },\n            ]}\n            series={[\n              {\n                data: chartData.map((d) => d.value),\n                area: true,\n                color: \"#4caf50\",\n                curve: \"natural\",\n                showMark: false,\n              },\n            ]}\n            margin={{\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n            }}\n            sx={(theme) => ({\n              \"& .MuiLineElement-root\": {\n                strokeWidth: 2,\n              },\n              \"& .MuiAreaElement-root\": {\n                fillOpacity: 0.15,\n              },\n              \"& .MuiChartsAxis-tick\": {\n                display: \"none\",\n              },\n              \"& .MuiChartsAxis-line\": {\n                display: \"none\",\n              },\n              \"& .MuiChartsAxis-tickLabel\": {\n                fill: (theme.vars || theme).palette.text.secondary,\n                fontSize: \"0.75rem\",\n              },\n            })}\n            slotProps={{\n              legend: {\n                sx: { display: \"none\" },\n              },\n            }}\n          />\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/payment-history-chart.png",
    "category": "dashboard"
  }
}