{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-conversation",
  "type": "registry:item",
  "title": "Ai Conversation",
  "description": "A ai-conversation item.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-conversation/ai-conversation.demo.tsx",
      "target": "src/mui-plus/components/ai-conversation/ai-conversation.demo.tsx",
      "content": "\"use client\";\n\nimport {\n  Conversation,\n  ConversationContent,\n  ConversationScrollButton,\n} from \"./ai-conversation\";\n\nexport default function AIConversationDemo() {\n  return (\n    <div className=\"w-full h-[400px] border rounded-lg overflow-hidden\">\n      <Conversation>\n        <ConversationContent>\n          <div className=\"space-y-4\">\n            {/* Simulated conversation messages */}\n            <div className=\"p-3 bg-secondary rounded-lg max-w-[80%]\">\n              <p className=\"text-sm\">Hello! How can I help you today?</p>\n            </div>\n\n            <div className=\"p-3 bg-primary text-primary-foreground rounded-lg max-w-[80%] ml-auto\">\n              <p className=\"text-sm\">I need help with React components.</p>\n            </div>\n\n            <div className=\"p-3 bg-secondary rounded-lg max-w-[80%]\">\n              <p className=\"text-sm\">\n                I'd be happy to help you with React components! What specific\n                aspect would you like to explore?\n              </p>\n            </div>\n\n            <div className=\"p-3 bg-primary text-primary-foreground rounded-lg max-w-[80%] ml-auto\">\n              <p className=\"text-sm\">\n                How do I manage state in functional components?\n              </p>\n            </div>\n\n            <div className=\"p-3 bg-secondary rounded-lg max-w-[80%]\">\n              <p className=\"text-sm mb-2\">\n                In functional React components, you can manage state using\n                hooks:\n              </p>\n              <ul className=\"list-disc list-inside text-sm space-y-1\">\n                <li>useState for local component state</li>\n                <li>useReducer for complex state logic</li>\n                <li>useContext for global state sharing</li>\n              </ul>\n            </div>\n\n            {/* Add more messages to demonstrate scrolling */}\n            {Array.from({ length: 10 }, (_, i) => (\n              <div\n                key={i}\n                className={`p-3 rounded-lg max-w-[80%] ${\n                  i % 2 === 0\n                    ? \"bg-secondary\"\n                    : \"bg-primary text-primary-foreground ml-auto\"\n                }`}\n              >\n                <p className=\"text-sm\">Message {i + 6}</p>\n              </div>\n            ))}\n          </div>\n        </ConversationContent>\n\n        <ConversationScrollButton />\n      </Conversation>\n    </div>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-conversation/ai-conversation.tsx",
      "target": "src/mui-plus/components/ai-conversation/ai-conversation.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowDownIcon } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { useCallback } from \"react\";\nimport { StickToBottom, useStickToBottomContext } from \"use-stick-to-bottom\";\n\nexport type ConversationProps = ComponentProps<typeof StickToBottom>;\n\nexport const Conversation = ({ className, ...props }: ConversationProps) => (\n  <StickToBottom\n    className={cn(\"relative flex-1 overflow-y-auto\", className)}\n    initial=\"smooth\"\n    resize=\"smooth\"\n    role=\"log\"\n    {...props}\n  />\n);\n\nexport type ConversationContentProps = ComponentProps<\n  typeof StickToBottom.Content\n>;\n\nexport const ConversationContent = ({\n  className,\n  ...props\n}: ConversationContentProps) => (\n  <StickToBottom.Content className={cn(\"p-4\", className)} {...props} />\n);\n\nexport type ConversationScrollButtonProps = ComponentProps<typeof Button>;\n\nexport const ConversationScrollButton = ({\n  className,\n  ...props\n}: ConversationScrollButtonProps) => {\n  const { isAtBottom, scrollToBottom } = useStickToBottomContext();\n\n  const handleScrollToBottom = useCallback(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return (\n    !isAtBottom && (\n      <Button\n        className={cn(\n          \"absolute bottom-4 left-[50%] translate-x-[-50%] rounded-full\",\n          className,\n        )}\n        onClick={handleScrollToBottom}\n        size=\"icon\"\n        type=\"button\"\n        variant=\"outline\"\n        {...props}\n      >\n        <ArrowDownIcon className=\"size-4\" />\n      </Button>\n    )\n  );\n};\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-conversation.png",
    "category": "ai"
  }
}