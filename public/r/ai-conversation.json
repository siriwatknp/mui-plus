{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-conversation",
  "type": "registry:item",
  "title": "Ai Conversation",
  "description": "A ai-conversation item.",
  "dependencies": [
    "@mui/material",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-conversation/ai-conversation.demo.tsx",
      "target": "src/mui-plus/components/ai-conversation/ai-conversation.demo.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  Conversation,\n  ConversationContent,\n  ConversationScrollButton,\n} from \"./ai-conversation\";\n\nexport default function AIConversationDemo() {\n  return (\n    <Paper\n      variant=\"outlined\"\n      sx={{\n        width: \"100%\",\n        height: 400,\n        overflow: \"hidden\",\n        display: \"flex\",\n      }}\n    >\n      <Conversation>\n        <ConversationContent>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            {/* Simulated conversation messages */}\n            <Paper\n              sx={{\n                p: 1.5,\n                bgcolor: \"action.hover\",\n                maxWidth: \"80%\",\n              }}\n            >\n              <Typography variant=\"body2\">\n                Hello! How can I help you today?\n              </Typography>\n            </Paper>\n\n            <Paper\n              sx={{\n                p: 1.5,\n                bgcolor: \"primary.main\",\n                color: \"primary.contrastText\",\n                maxWidth: \"80%\",\n                ml: \"auto\",\n              }}\n            >\n              <Typography variant=\"body2\">\n                I need help with React components.\n              </Typography>\n            </Paper>\n\n            <Paper\n              sx={{\n                p: 1.5,\n                bgcolor: \"action.hover\",\n                maxWidth: \"80%\",\n              }}\n            >\n              <Typography variant=\"body2\">\n                I'd be happy to help you with React components! What specific\n                aspect would you like to explore?\n              </Typography>\n            </Paper>\n\n            <Paper\n              sx={{\n                p: 1.5,\n                bgcolor: \"primary.main\",\n                color: \"primary.contrastText\",\n                maxWidth: \"80%\",\n                ml: \"auto\",\n              }}\n            >\n              <Typography variant=\"body2\">\n                How do I manage state in functional components?\n              </Typography>\n            </Paper>\n\n            <Paper\n              sx={{\n                p: 1.5,\n                bgcolor: \"action.hover\",\n                maxWidth: \"80%\",\n              }}\n            >\n              <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                In functional React components, you can manage state using\n                hooks:\n              </Typography>\n              <Box component=\"ul\" sx={{ m: 0, pl: 2.5 }}>\n                <Typography component=\"li\" variant=\"body2\" sx={{ mb: 0.5 }}>\n                  useState for local component state\n                </Typography>\n                <Typography component=\"li\" variant=\"body2\" sx={{ mb: 0.5 }}>\n                  useReducer for complex state logic\n                </Typography>\n                <Typography component=\"li\" variant=\"body2\">\n                  useContext for global state sharing\n                </Typography>\n              </Box>\n            </Paper>\n\n            {/* Add more messages to demonstrate scrolling */}\n            {Array.from({ length: 10 }, (_, i) => (\n              <Paper\n                key={i}\n                sx={{\n                  p: 1.5,\n                  bgcolor: i % 2 === 0 ? \"action.hover\" : \"primary.main\",\n                  color: i % 2 === 0 ? \"text.primary\" : \"primary.contrastText\",\n                  maxWidth: \"80%\",\n                  ...(i % 2 !== 0 && { ml: \"auto\" }),\n                }}\n              >\n                <Typography variant=\"body2\">Message {i + 6}</Typography>\n              </Paper>\n            ))}\n          </Box>\n        </ConversationContent>\n\n        <ConversationScrollButton />\n      </Conversation>\n    </Paper>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-conversation/ai-conversation.tsx",
      "target": "src/mui-plus/components/ai-conversation/ai-conversation.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport { ArrowDownIcon } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { useCallback } from \"react\";\nimport { StickToBottom, useStickToBottomContext } from \"use-stick-to-bottom\";\n\nexport type ConversationProps = ComponentProps<typeof StickToBottom>;\n\nexport const Conversation = ({ ...props }: ConversationProps) => (\n  <StickToBottom\n    style={{\n      position: \"relative\",\n      flex: 1,\n      overflowY: \"auto\",\n    }}\n    initial=\"smooth\"\n    resize=\"smooth\"\n    role=\"log\"\n    {...props}\n  />\n);\n\nexport type ConversationContentProps = ComponentProps<\n  typeof StickToBottom.Content\n>;\n\nexport const ConversationContent = ({ ...props }: ConversationContentProps) => (\n  <StickToBottom.Content\n    style={{\n      padding: \"16px\",\n    }}\n    {...props}\n  />\n);\n\nexport type ConversationEmptyStateProps = ComponentProps<typeof Box> & {\n  title?: string;\n  description?: string;\n  icon?: React.ReactNode;\n};\n\nexport const ConversationEmptyState = ({\n  title = \"No messages yet\",\n  description = \"Start a conversation to see messages here\",\n  icon,\n  children,\n  sx,\n  ...props\n}: ConversationEmptyStateProps) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      width: \"100%\",\n      height: \"100%\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      gap: 3,\n      p: 8,\n      textAlign: \"center\",\n      ...sx,\n    }}\n    {...props}\n  >\n    {children ?? (\n      <>\n        {icon && <Box sx={{ color: \"text.secondary\" }}>{icon}</Box>}\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 0.5 }}>\n          <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n            {title}\n          </Typography>\n          {description && (\n            <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\n              {description}\n            </Typography>\n          )}\n        </Box>\n      </>\n    )}\n  </Box>\n);\n\nexport type ConversationScrollButtonProps = ComponentProps<typeof IconButton>;\n\nexport const ConversationScrollButton = ({\n  sx,\n  ...props\n}: ConversationScrollButtonProps) => {\n  const { isAtBottom, scrollToBottom } = useStickToBottomContext();\n\n  const handleScrollToBottom = useCallback(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return (\n    !isAtBottom && (\n      <IconButton\n        onClick={handleScrollToBottom}\n        sx={{\n          position: \"absolute\",\n          bottom: 16,\n          left: \"50%\",\n          transform: \"translateX(-50%)\",\n          bgcolor: \"background.paper\",\n          color: \"text.primary\",\n          border: 1,\n          borderColor: \"divider\",\n          \"&:hover\": {\n            bgcolor: \"action.hover\",\n          },\n          \"&:active\": {\n            transform: \"translateX(-50%) scale(0.95)\",\n          },\n          ...sx,\n        }}\n        {...props}\n      >\n        <ArrowDownIcon className=\"size-4\" />\n      </IconButton>\n    )\n  );\n};\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-conversation.png",
    "category": "ai"
  }
}