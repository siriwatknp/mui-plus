{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "grid-widget",
  "type": "registry:component",
  "title": "Grid Widget",
  "description": "A responsive grid layout with 5 and 7 column spans for creating asymmetric layouts.",
  "dependencies": [
    "@mui/material"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/components/grid-widget/grid-widget.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\n\nexport interface GridWidgetProps extends React.ComponentProps<typeof Box> {\n  children?: React.ReactNode;\n  /**\n   * Responsive strategy\n   * container: uses container queries\n   * media: uses media queries\n   * @default 'container'\n   */\n  responsive?: \"container\" | \"media\";\n  /**\n   * Column layout pattern for the grid items on md+ breakpoints\n   * - \"5/7\": Creates a 5-column and 7-column layout pattern (default)\n   *   Use when: Composing data visualization widgets, analytics cards, charts with stats,\n   *   or any asymmetric widget arrangement where you need varied content sizes\n   * - \"1/2\": Creates a 4-column and 8-column layout pattern\n   *   Use when: Creating widgets with a 1:2 ratio, metric cards with detailed content,\n   *   KPI widgets with supporting data, or compact stats alongside larger visualizations\n   * @default '5/7'\n   */\n  columns?: \"1/2\" | \"5/7\";\n}\n\nexport function GridWidget({\n  children,\n  sx,\n  responsive = \"container\",\n  columns = \"5/7\",\n  style,\n  ...props\n}: GridWidgetProps) {\n  return (\n    <Box\n      sx={[\n        {\n          \"--cols\": \"var(--5_7,)\",\n          \"--1_3\": \"var(--cols,)\",\n          \"--5_7\": \"var(--cols,)\",\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(12, 1fr)\",\n          gap: 2,\n          containerType: \"inline-size\",\n          \"&[data-style-responsive='media']\": {\n            containerType: \"unset\",\n          },\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...(responsive === \"media\" && {\n        \"data-style-responsive\": \"media\",\n      })}\n      style={{\n        ...(columns === \"1/2\" && {\n          \"--cols\": \"var(--1_3,)\",\n        }),\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </Box>\n  );\n}\n\nexport interface GridWidgetItemProps extends React.ComponentProps<typeof Box> {\n  /**\n   * Ratio of the item\n   * wide: 7 columns on md and up\n   * normal: 5 columns on md and up\n   * full: 12 columns on all breakpoints\n   * narrow: 5 columns on md and up, spans 2 rows\n   * @default 'normal'\n   */\n  ratio?: \"wide\" | \"normal\" | \"full\" | \"narrow\";\n  children?: React.ReactNode;\n}\n\nexport function GridWidgetItem({\n  ratio = \"normal\",\n  children,\n  sx,\n  className = \"\",\n  ...props\n}: GridWidgetItemProps) {\n  return (\n    <Box\n      data-style-ratio={ratio}\n      sx={[\n        (theme) => ({\n          display: \"flex\",\n          flexDirection: \"column\",\n          gridColumn: \"span 12\",\n          [theme.containerQueries?.up(\"sm\") || \"@container (min-width: 600px)\"]:\n            {\n              gridColumn: \"var(--col-sm, span 6)\",\n            },\n          [theme.containerQueries?.up(\"md\") || \"@container (min-width: 900px)\"]:\n            {\n              gridColumn:\n                \"var(--col-md, var(--5_7, span 5) var(--1_3, span 4))\",\n            },\n          \"[data-style-responsive='media'] > &\": {\n            [theme.breakpoints.up(\"sm\")]: {\n              gridColumn: \"var(--col-sm, span 6)\",\n            },\n            [theme.breakpoints.up(\"md\")]: {\n              gridColumn:\n                \"var(--col-md, var(--5_7, span 5) var(--1_3, span 4))\",\n            },\n          },\n          \"&[data-style-ratio='full']\": {\n            \"--col-sm\": \"span 12\",\n            \"--col-md\": \"span 12\",\n          },\n          \"&[data-style-ratio='wide']\": {\n            \"--col-sm\": \"span 6\",\n            \"--col-md\": \"var(--5_7, span 7) var(--1_3, span 8)\",\n          },\n          \"&[data-style-ratio='narrow']\": {\n            \"--col-sm\": \"span 6\",\n            \"--col-md\": \"var(--5_7, span 5) var(--1_3, span 4)\",\n            gridRow: \"span 2\",\n          },\n          \"& > *\": {\n            flexGrow: 1,\n          },\n        }),\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...props}\n    >\n      {children}\n    </Box>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/grid-widget.png"
  }
}