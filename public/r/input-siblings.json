{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-siblings",
  "type": "registry:component",
  "title": "Input Siblings",
  "description": "A set of input components demonstrating sibling input logic and custom hooks.",
  "files": [
    {
      "path": "registry/new-york/blocks/input-siblings/input-siblings.tsx",
      "content": "\"use client\";\n\nimport { useInput } from \"@/registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useInput\";\nimport { useInputSiblings } from \"@/registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useInputSiblings\";\nimport { useSeparatorInput } from \"@/registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useSeparatorInput\";\n\nfunction SingleInput() {\n  const { getInputProps } = useInput({\n    autoFocus: true,\n    maxLength: 4,\n  });\n  return <input className=\"input border\" {...getInputProps()} />;\n}\n\nfunction BirthdayInput() {\n  const { getInputProps } = useSeparatorInput({\n    maxLength: [2, 2, 4],\n    separator: \"/\",\n  });\n  return <input className=\"input border\" {...getInputProps()} />;\n}\n\nfunction DayMonthYear() {\n  const day = useInput({ maxLength: 2 });\n  const month = useInput({ maxLength: 2 });\n  const year = useInput({ maxLength: 4 });\n  const [getDayInputProps, getMonthInputProps, getYearInputProps] =\n    useInputSiblings({ siblings: [day, month, year] });\n  return (\n    <div className=\"flex gap-2\">\n      <div className=\"flex flex-col items-start\">\n        <label htmlFor=\"day\" className=\"text-xs mb-1\">\n          Day\n        </label>\n        <input\n          id=\"day\"\n          size={2}\n          maxLength={2}\n          className=\"input w-12 border\"\n          {...getDayInputProps()}\n        />\n      </div>\n      <div className=\"flex flex-col items-start\">\n        <label htmlFor=\"month\" className=\"text-xs mb-1\">\n          Month\n        </label>\n        <input\n          id=\"month\"\n          size={2}\n          maxLength={2}\n          className=\"input w-12 border\"\n          {...getMonthInputProps()}\n        />\n      </div>\n      <div className=\"flex flex-col items-start\">\n        <label htmlFor=\"year\" className=\"text-xs mb-1\">\n          Year\n        </label>\n        <input\n          id=\"year\"\n          size={4}\n          maxLength={4}\n          className=\"input w-20 border\"\n          {...getYearInputProps()}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction CreditCard() {\n  const cardNumber = useSeparatorInput({\n    maxLength: [4, 4, 4, 4],\n    separator: \" \",\n  });\n  const expiration = useSeparatorInput({ maxLength: [2, 2] });\n  const ccv = useInput({ maxLength: 4 });\n  const inputs = useInputSiblings({ siblings: [cardNumber, expiration, ccv] });\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex flex-col items-start\">\n        <label htmlFor=\"card-number\" className=\"text-xs mb-1\">\n          Card Number\n        </label>\n        <input\n          id=\"card-number\"\n          size={19}\n          maxLength={19}\n          className=\"input w-56 border\"\n          {...inputs[0]()}\n        />\n      </div>\n      <div className=\"flex gap-2\">\n        <div className=\"flex flex-col items-start\">\n          <label htmlFor=\"exp\" className=\"text-xs mb-1\">\n            Expiration\n          </label>\n          <input\n            id=\"exp\"\n            size={5}\n            maxLength={5}\n            placeholder=\"MM/YY\"\n            className=\"input w-16 border\"\n            {...inputs[1]()}\n          />\n        </div>\n        <div className=\"flex flex-col items-start\">\n          <label htmlFor=\"ccv\" className=\"text-xs mb-1\">\n            CCV\n          </label>\n          <input\n            id=\"ccv\"\n            size={3}\n            maxLength={4}\n            className=\"input w-12 border\"\n            {...inputs[2]()}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Pin() {\n  const first = useInput({ maxLength: 1 });\n  const second = useInput({ maxLength: 1 });\n  const third = useInput({ maxLength: 1 });\n  const last = useInput({ maxLength: 1 });\n  const inputs = useInputSiblings({ siblings: [first, second, third, last] });\n  return (\n    <div className=\"flex gap-1\">\n      <input\n        size={1}\n        className=\"input w-8 text-center border\"\n        {...inputs[0]()}\n      />\n      <input\n        size={1}\n        className=\"input w-8 text-center border\"\n        {...inputs[1]()}\n      />\n      <input\n        size={1}\n        className=\"input w-8 text-center border\"\n        {...inputs[2]()}\n      />\n      <input\n        size={1}\n        className=\"input w-8 text-center border\"\n        {...inputs[3]()}\n      />\n    </div>\n  );\n}\n\nexport function InputSiblings() {\n  return (\n    <div className=\"flex flex-col gap-6 p-6 max-w-md mx-auto\">\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">Single Input</h2>\n        <SingleInput />\n      </div>\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">Birthday Input</h2>\n        <BirthdayInput />\n      </div>\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">Day / Month / Year</h2>\n        <DayMonthYear />\n      </div>\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">Credit Card</h2>\n        <CreditCard />\n      </div>\n      <div>\n        <h2 className=\"text-lg font-semibold mb-2\">Pin</h2>\n        <Pin />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useInput.ts",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { InputHanders } from \"./types\";\n\nexport interface UseInputOptions {\n  /**\n   * number of characters allowed for this input\n   */\n  maxLength: number;\n  /**\n   * If `true`, the input will be focused\n   */\n  autoFocus?: boolean;\n  /**\n   * initial value (don't use together with `value`)\n   */\n  defaultValue?: string;\n  /**\n   * value for controlled input\n   */\n  value?: string;\n  /**\n   * a function to validate the user input before setting the state\n   */\n  validator?: (value: string) => boolean;\n  /**\n   * a callback function when input value changed\n   */\n  onChange?: (value: string, meta: { invalid: boolean }) => void;\n}\n\nexport function useIsFirstMount() {\n  const firstMount = React.useRef(true);\n  React.useEffect(() => {\n    firstMount.current = false;\n  }, []);\n  return firstMount.current;\n}\n\nexport function useInput(options: UseInputOptions) {\n  const { autoFocus = false, value } = options;\n  const ref = React.useRef<HTMLInputElement | null>(null);\n  const [internalValue, setInternalValue] = React.useState(\n    (value || options.defaultValue || \"\").slice(0, options.maxLength)\n  );\n\n  useEffect(() => {\n    if (autoFocus && ref.current) {\n      ref.current.focus();\n      if (ref.current.value.length !== 0) {\n        ref.current.setSelectionRange(0, ref.current.value.length);\n      }\n    }\n  }, [autoFocus]);\n\n  const isFirstMount = useIsFirstMount();\n\n  useEffect(() => {\n    if (!isFirstMount) {\n      setInternalValue(value || \"\");\n    }\n  }, [value]);\n\n  return {\n    options,\n    value: internalValue,\n    invalid:\n      typeof options.validator === \"function\" &&\n      !options.validator(internalValue),\n    setValue: setInternalValue,\n    getDOM: () => ref.current,\n    getInputProps: (handlers?: Pick<InputHanders, \"onChange\">) => ({\n      ref,\n      value: internalValue,\n      onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue = event.target.value;\n        handlers?.onChange?.(event);\n        inputValue = inputValue.substr(0, options.maxLength);\n        setInternalValue(inputValue);\n        options.onChange?.(inputValue, {\n          invalid:\n            typeof options.validator === \"function\" &&\n            !options.validator(inputValue),\n        });\n      },\n    }),\n  };\n}\n\nconst prependZero = (value?: string) => {\n  if (!value) return \"\";\n  return value.length === 1 ? `0${value}` : value;\n};\nexport interface UseTwoNumbersInputOptions\n  extends Omit<UseInputOptions, \"maxLength\"> {}\n\nexport function useTwoNumbersInput(options?: UseTwoNumbersInputOptions) {\n  let defaultValue = options?.defaultValue;\n  if (typeof defaultValue !== \"undefined\") {\n    defaultValue = prependZero(defaultValue);\n  }\n  let value = options?.value;\n  if (typeof value !== \"undefined\") {\n    value = prependZero(value);\n  }\n  const result = useInput({\n    validator: (value) => new RegExp(/^\\d{0,2}$/).test(value),\n    ...options,\n    defaultValue,\n    value,\n    maxLength: 2,\n  });\n  return {\n    ...result,\n    getInputProps: (handlers?: Pick<InputHanders, \"onChange\" | \"onBlur\">) => ({\n      ...result.getInputProps(handlers),\n      onBlur: (event: React.FocusEvent<HTMLInputElement>) => {\n        console.log(\"blur\");\n        handlers?.onBlur?.(event);\n        result.setValue((currentValue) =>\n          currentValue.length === 1 ? `0${currentValue}` : currentValue\n        );\n      },\n    }),\n  };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useInputSiblings.ts",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { InputHanders } from \"./types\";\n\ninterface Sibling {\n  /**\n   * a fn that return input props\n   */\n  getInputProps: () => Partial<React.JSX.IntrinsicElements[\"input\"]>;\n  /**\n   * a fn that provide access to the HTMLInputElement\n   */\n  getDOM: () => HTMLInputElement | null;\n  /**\n   * options that contain `maxLength`\n   */\n  options: {\n    maxLength: number | Array<number>;\n  };\n}\nexport interface UseInputSiblingsOptions {\n  siblings: Array<Sibling>;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nfunction getJumpLength(maxLength: Sibling[\"options\"][\"maxLength\"]) {\n  if (typeof maxLength === \"number\") return maxLength;\n  return maxLength.reduce((total, num) => total + num) + maxLength.length - 1;\n}\nexport function useInputSiblings(options: UseInputSiblingsOptions) {\n  const { siblings } = options;\n  const blurEvent = React.useRef<\n    React.FocusEvent<HTMLInputElement> | undefined\n  >(undefined);\n  const [unFocused, setUnFocused] = React.useState(false);\n\n  React.useEffect(() => {\n    if (unFocused) {\n      if (\n        siblings.every((input) => {\n          const DOM = input.getDOM();\n          return DOM && DOM.ownerDocument.activeElement !== DOM;\n        })\n      ) {\n        blurEvent.current && options?.onBlur?.(blurEvent.current);\n      }\n    }\n  }, [unFocused]);\n\n  return siblings.map((input, index) => {\n    return function (handlers?: InputHanders) {\n      const inputProps = input.getInputProps();\n      return {\n        ...inputProps,\n        onFocus: (event: React.FocusEvent<HTMLInputElement>) => {\n          handlers?.onFocus?.(event);\n          inputProps.onFocus?.(event);\n          setUnFocused(false);\n        },\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          handlers?.onChange?.(event);\n          inputProps.onChange?.(event);\n          const { value } = event.target;\n          const jumpLength = getJumpLength(input.options.maxLength);\n          if (value.length === jumpLength) {\n            const nextDOM = siblings[index + 1]?.getDOM();\n            if (nextDOM) {\n              nextDOM.focus();\n              nextDOM.setSelectionRange(0, nextDOM.value.length);\n            }\n          }\n        },\n        onBlur: (event: React.FocusEvent<HTMLInputElement>) => {\n          handlers?.onBlur?.(event);\n          inputProps.onBlur?.(event);\n          blurEvent.current = event;\n          setUnFocused(true);\n        },\n        onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {\n          handlers?.onKeyDown?.(event);\n          inputProps.onKeyDown?.(event);\n          if (index > 0) {\n            const DOM = siblings[index].getDOM();\n            if (event.code === \"Backspace\" && DOM && !DOM.value.length) {\n              siblings[index - 1].getDOM()?.focus();\n            }\n          }\n        },\n      };\n    };\n  });\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/input-siblings/hooks/useInputSiblings/useSeparatorInput.ts",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { InputHanders } from \"./types\";\nimport { useIsFirstMount } from \"./useInput\";\n\nconst someEqual = <T>(value: T, matches: Array<T>) =>\n  matches.some((match) => value === match);\nconst getSeparatorChars = (maxLength: Array<number>) => {\n  const chars: Array<number> = [];\n  let count = 0;\n  maxLength.forEach((num, index, array) => {\n    count += num;\n    if (index !== array.length - 1) {\n      chars.push(count);\n    }\n    count += 1; // for separator\n  });\n  return chars;\n};\nconst appendSeparator = (value: string, separatorIndexes: Array<number>) =>\n  someEqual(value.length, separatorIndexes) ? `${value}/` : value;\nexport interface UseSeparatorInputOptions {\n  /**\n   * number of characters allowed for this input\n   */\n  maxLength: Array<number>;\n  /**\n   * separator between number, 10/02/1999\n   * @default \"/\"\n   */\n  separator?: string;\n  /**\n   * If `true`, the input will be focused\n   */\n  autoFocus?: boolean;\n  /**\n   * initial value (don't use together with `value`)\n   */\n  defaultValue?: string;\n  /**\n   * value for controlled input\n   */\n  value?: string;\n  /**\n   * a function to validate the user input before setting the state\n   */\n  validator?: (value: string) => boolean;\n  /**\n   * a callback function when input value changed\n   */\n  onChange?: (value: string, meta: { invalid: boolean }) => void;\n}\nexport function useSeparatorInput(options: UseSeparatorInputOptions) {\n  const {\n    autoFocus = false,\n    defaultValue,\n    value,\n    maxLength,\n    separator = \"/\",\n    validator,\n  } = options;\n  const maxCharaters =\n    maxLength.reduce((total, num) => total + num) + maxLength.length - 1;\n  const separatorIndexes = getSeparatorChars(maxLength);\n\n  const ref = React.useRef<HTMLInputElement | null>(null);\n  const codeRef = React.useRef<string | undefined>(undefined);\n  const [internalValue, setInternalValue] = React.useState(\n    appendSeparator(\n      (value || defaultValue || \"\").slice(0, maxCharaters),\n      separatorIndexes\n    )\n  );\n\n  React.useEffect(() => {\n    if (autoFocus && ref.current) {\n      ref.current.focus();\n    }\n  }, [autoFocus]);\n\n  const isFirstMount = useIsFirstMount();\n\n  React.useEffect(() => {\n    if (!isFirstMount) {\n      setInternalValue(value || \"\");\n    }\n  }, [value]);\n\n  return {\n    options,\n    value: internalValue,\n    setValue: setInternalValue,\n    invalid: typeof validator === \"function\" && !validator(internalValue),\n    getDOM: () => ref.current,\n    getInputProps: (handlers?: InputHanders) => ({\n      ref,\n      value: internalValue,\n      onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n        handlers?.onChange?.(event);\n        const inputValue = event.target.value;\n        let newValue = inputValue;\n        if (\n          codeRef.current === \"Backspace\" &&\n          someEqual(inputValue.length, separatorIndexes)\n        ) {\n          newValue = inputValue.slice(0, -1);\n        } else {\n          if (someEqual(inputValue.length, separatorIndexes)) {\n            newValue = `${inputValue}${separator}`;\n          }\n        }\n\n        newValue = newValue.substr(0, maxCharaters);\n        setInternalValue(newValue);\n        options?.onChange?.(newValue, {\n          invalid: typeof validator === \"function\" && !validator(newValue),\n        });\n      },\n      onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {\n        handlers?.onKeyDown?.(event);\n        codeRef.current = event.code;\n      },\n    }),\n  };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/input-siblings/hooks/useInputSiblings/types.ts",
      "content": "export interface InputHanders {\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n",
      "type": "registry:hook"
    }
  ]
}