{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-code-block",
  "type": "registry:item",
  "title": "Ai Code Block",
  "description": "A ai-code-block item.",
  "dependencies": [
    "@mui/material",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-code-block/ai-code-block.demo.tsx",
      "target": "src/mui-plus/components/ai-code-block/ai-code-block.demo.tsx",
      "content": "\"use client\";\n\nimport { CodeBlock, CodeBlockCopyButton } from \"./ai-code-block\";\n\nexport default function AICodeBlockDemo() {\n  const sampleCode = `function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Example usage\nconsole.log(fibonacci(10)); // 55`;\n\n  const tsxCode = `import React from 'react';\n\ninterface ButtonProps {\n  onClick: () => void;\n  children: React.ReactNode;\n}\n\nexport const Button: React.FC<ButtonProps> = ({ onClick, children }) => (\n  <button\n    onClick={onClick}\n    className=\"px-4 py-2 bg-blue-500 text-white rounded\"\n  >\n    {children}\n  </button>\n);`;\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto space-y-6 p-8\">\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          JavaScript Code Block\n        </h3>\n        <CodeBlock code={sampleCode} language=\"javascript\" showLineNumbers>\n          <CodeBlockCopyButton />\n        </CodeBlock>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          TypeScript Code Block\n        </h3>\n        <CodeBlock code={tsxCode} language=\"tsx\" showLineNumbers>\n          <CodeBlockCopyButton />\n        </CodeBlock>\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Without Line Numbers\n        </h3>\n        <CodeBlock code={sampleCode} language=\"javascript\">\n          <CodeBlockCopyButton />\n        </CodeBlock>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-code-block/ai-code-block.tsx",
      "target": "src/mui-plus/components/ai-code-block/ai-code-block.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Paper from \"@mui/material/Paper\";\nimport { useColorScheme, useTheme } from \"@mui/material/styles\";\nimport { CheckIcon, CopyIcon } from \"lucide-react\";\nimport type { ComponentProps, ReactNode } from \"react\";\nimport { createContext, useContext, useState } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  oneDark,\n  oneLight,\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ntype CodeBlockContextType = {\n  code: string;\n};\n\nconst CodeBlockContext = createContext<CodeBlockContextType>({\n  code: \"\",\n});\n\nexport type CodeBlockProps = ComponentProps<typeof Paper> & {\n  code: string;\n  language: string;\n  showLineNumbers?: boolean;\n  children?: ReactNode;\n};\n\nexport const CodeBlock = ({\n  code,\n  language,\n  showLineNumbers = false,\n  children,\n  sx,\n  ...props\n}: CodeBlockProps) => {\n  const theme = useTheme();\n  const { mode, systemMode } = useColorScheme();\n  const isDarkMode = (systemMode || mode) === \"dark\";\n\n  return (\n    <CodeBlockContext.Provider value={{ code }}>\n      <Paper\n        variant=\"outlined\"\n        sx={{\n          position: \"relative\",\n          width: \"100%\",\n          overflow: \"hidden\",\n          ...sx,\n        }}\n        {...props}\n      >\n        <Box sx={{ position: \"relative\" }}>\n          <SyntaxHighlighter\n            codeTagProps={{\n              style: {\n                fontFamily: \"monospace\",\n                fontSize: \"0.75rem\",\n              },\n            }}\n            customStyle={{\n              margin: 0,\n              padding: \"16px\",\n              fontSize: \"0.75rem\",\n              background: isDarkMode\n                ? (theme.vars || theme).palette.background.paper\n                : (theme.vars || theme).palette.background.default,\n              color: (theme.vars || theme).palette.text.primary,\n            }}\n            language={language}\n            lineNumberStyle={{\n              color: (theme.vars || theme).palette.text.secondary,\n              paddingRight: \"1rem\",\n              minWidth: \"2.5rem\",\n            }}\n            showLineNumbers={showLineNumbers}\n            style={isDarkMode ? oneDark : oneLight}\n          >\n            {code}\n          </SyntaxHighlighter>\n          {children && (\n            <Box\n              sx={{\n                position: \"absolute\",\n                top: \"8px\",\n                right: \"8px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: 1,\n              }}\n            >\n              {children}\n            </Box>\n          )}\n        </Box>\n      </Paper>\n    </CodeBlockContext.Provider>\n  );\n};\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof IconButton> & {\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const { code } = useContext(CodeBlockContext);\n\n  const copyToClipboard = async () => {\n    if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n      onError?.(new Error(\"Clipboard API not available\"));\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(code);\n      setIsCopied(true);\n      onCopy?.();\n      setTimeout(() => setIsCopied(false), timeout);\n    } catch (error) {\n      onError?.(error as Error);\n    }\n  };\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <IconButton\n      onClick={copyToClipboard}\n      aria-label={isCopied ? \"Copied!\" : \"Copy code\"}\n      {...props}\n    >\n      {children ?? <Icon size={14} />}\n    </IconButton>\n  );\n};\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-code-block.png",
    "category": "ai"
  }
}