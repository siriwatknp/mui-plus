{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-message",
  "type": "registry:item",
  "title": "Ai Message",
  "description": "A ai-message item.",
  "dependencies": ["@mui/material", "@emotion/react", "@emotion/styled", "ai"],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-message/ai-message.demo.tsx",
      "target": "src/mui-plus/components/ai-message/ai-message.demo.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { Message, MessageContent, MessageAvatar } from \"./ai-message\";\n\nexport default function AIMessageDemo() {\n  return (\n    <Box sx={{ width: \"100%\", maxWidth: 896, mx: \"auto\", p: 4 }}>\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 3 }}>\n        <Box>\n          <Typography\n            variant=\"body2\"\n            sx={{ fontWeight: 500, color: \"text.secondary\", mb: 2 }}\n          >\n            Message Types\n          </Typography>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            {/* User Message */}\n            <Message from=\"user\">\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  How do I create a custom hook in React?\n                </Typography>\n              </MessageContent>\n              <MessageAvatar name=\"User\" />\n            </Message>\n\n            {/* Assistant Message */}\n            <Message from=\"assistant\">\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  To create a custom hook in React, follow these steps:\n                </Typography>\n                <Box\n                  component=\"ol\"\n                  sx={{\n                    listStyleType: \"decimal\",\n                    listStylePosition: \"inside\",\n                    mt: 1,\n                    \"& li\": { mb: 0.5 },\n                  }}\n                >\n                  <Typography component=\"li\" variant=\"body2\">\n                    Start the function name with \"use\"\n                  </Typography>\n                  <Typography component=\"li\" variant=\"body2\">\n                    Call other hooks inside if needed\n                  </Typography>\n                  <Typography component=\"li\" variant=\"body2\">\n                    Return necessary values\n                  </Typography>\n                </Box>\n              </MessageContent>\n              <MessageAvatar name=\"AI\" />\n            </Message>\n\n            {/* User Message with longer content */}\n            <Message from=\"user\">\n              <MessageAvatar name=\"User\" />\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  Can you show me an example?\n                </Typography>\n              </MessageContent>\n            </Message>\n\n            {/* Assistant Message with code */}\n            <Message from=\"assistant\">\n              <MessageAvatar name=\"AI\" />\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  Here's a simple example of a custom hook:\n                </Typography>\n                <Paper\n                  variant=\"outlined\"\n                  component=\"pre\"\n                  sx={{\n                    mt: 1,\n                    p: 1,\n                    bgcolor: \"background.default\",\n                    borderRadius: 1,\n                    fontSize: \"0.75rem\",\n                    overflowX: \"auto\",\n                  }}\n                >\n                  <code>{`function useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () => setCount(prev => prev + 1);\n  const decrement = () => setCount(prev => prev - 1);\n\n  return { count, increment, decrement };\n}`}</code>\n                </Paper>\n              </MessageContent>\n            </Message>\n          </Box>\n        </Box>\n\n        <Box>\n          <Typography\n            variant=\"body2\"\n            sx={{ fontWeight: 500, color: \"text.secondary\", mb: 2 }}\n          >\n            Flat Variant\n          </Typography>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            <Message from=\"user\">\n              <MessageAvatar name=\"User\" />\n              <MessageContent variant=\"flat\">\n                <Typography variant=\"body2\">\n                  What about TypeScript support?\n                </Typography>\n              </MessageContent>\n            </Message>\n\n            <Message from=\"assistant\">\n              <MessageAvatar name=\"AI\" />\n              <MessageContent variant=\"flat\">\n                <Typography variant=\"body2\">\n                  TypeScript works great with custom hooks. You can add type\n                  annotations for parameters and return values:\n                </Typography>\n                <Paper\n                  variant=\"outlined\"\n                  component=\"pre\"\n                  sx={{\n                    mt: 1,\n                    p: 1,\n                    bgcolor: \"background.default\",\n                    borderRadius: 1,\n                    fontSize: \"0.75rem\",\n                    overflowX: \"auto\",\n                  }}\n                >\n                  <code>{`function useCounter(initialValue: number = 0) {\n  const [count, setCount] = useState<number>(initialValue);\n  // ...\n}`}</code>\n                </Paper>\n              </MessageContent>\n            </Message>\n          </Box>\n        </Box>\n\n        <Box>\n          <Typography\n            variant=\"body2\"\n            sx={{ fontWeight: 500, color: \"text.secondary\", mb: 2 }}\n          >\n            Avatar Positioning\n          </Typography>\n          <Typography\n            variant=\"caption\"\n            sx={{ color: \"text.secondary\", display: \"block\", mb: 2 }}\n          >\n            The avatar position automatically adjusts based on the order of\n            children\n          </Typography>\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n            {/* Avatar after content for user messages */}\n            <Message from=\"user\">\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  Avatar appears on the right for user messages\n                </Typography>\n              </MessageContent>\n              <MessageAvatar name=\"John\" />\n            </Message>\n\n            {/* Avatar before content for assistant messages */}\n            <Message from=\"assistant\">\n              <MessageAvatar name=\"Bot\" />\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  Avatar appears on the left for assistant messages\n                </Typography>\n              </MessageContent>\n            </Message>\n\n            {/* Avatar can also be placed differently */}\n            <Message from=\"user\">\n              <MessageAvatar name=\"Jane\" />\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  When avatar is placed first for user messages, it appears on\n                  the left\n                </Typography>\n              </MessageContent>\n            </Message>\n\n            <Message from=\"assistant\">\n              <MessageContent>\n                <Typography variant=\"body2\">\n                  When avatar is placed last for assistant messages, it appears\n                  on the right\n                </Typography>\n              </MessageContent>\n              <MessageAvatar name=\"AI\" />\n            </Message>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-message/ai-message.tsx",
      "target": "src/mui-plus/components/ai-message/ai-message.tsx",
      "content": "\"use client\";\n\nimport Avatar from \"@mui/material/Avatar\";\nimport Box from \"@mui/material/Box\";\nimport type { UIMessage } from \"ai\";\nimport type { ComponentProps } from \"react\";\n\nexport type MessageProps = ComponentProps<typeof Box> & {\n  from: UIMessage[\"role\"];\n};\n\nexport const Message = ({ from, sx, ...props }: MessageProps) => (\n  <Box\n    data-from={from}\n    sx={{\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"flex-end\",\n      gap: 1,\n      py: 2,\n      '&[data-from=\"user\"]': {\n        flexDirection: \"row-reverse\",\n        \"&:has(.MuiAvatar-root:last-child)\": {\n          flexDirection: \"row\",\n          justifyContent: \"flex-end\",\n        },\n      },\n      '&:not([data-from=\"user\"]):has(.MuiAvatar-root:last-child)': {\n        flexDirection: \"row-reverse\",\n        justifyContent: \"flex-end\",\n      },\n      ...sx,\n    }}\n    {...props}\n  />\n);\n\nexport type MessageContentProps = ComponentProps<typeof Box> & {\n  variant?: \"contained\" | \"flat\";\n};\n\nexport const MessageContent = ({\n  children,\n  variant = \"contained\",\n  sx,\n  ...props\n}: MessageContentProps) => (\n  <Box\n    sx={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: 1,\n      overflow: \"hidden\",\n      borderRadius: 2,\n      fontSize: \"0.875rem\",\n      lineHeight: 1.6,\n\n      ...(variant === \"contained\" && {\n        maxWidth: \"80%\",\n        px: 2,\n        py: 1.5,\n        // User message styles\n        \"[data-from='user'] > &\": {\n          bgcolor: \"primary.main\",\n          color: \"primary.contrastText\",\n        },\n        // Assistant message styles\n        \"[data-from='assistant'] > &, [data-from='system'] > &\": {\n          bgcolor: \"action.hover\",\n          color: \"text.primary\",\n        },\n      }),\n\n      ...(variant === \"flat\" && {\n        // User message with flat variant\n        \"[data-from='user'] > &\": {\n          maxWidth: \"80%\",\n          bgcolor: \"action.hover\",\n          px: 2,\n          py: 1.5,\n          color: \"text.primary\",\n        },\n        // Assistant message with flat variant\n        \"[data-from='assistant'] > &, [data-from='system'] > &\": {\n          borderRadius: 0,\n          color: \"text.primary\",\n        },\n      }),\n\n      ...sx,\n    }}\n    {...props}\n  >\n    {children}\n  </Box>\n);\n\nexport type MessageAvatarProps = ComponentProps<typeof Avatar> & {\n  src?: string;\n  name?: string;\n};\n\nexport const MessageAvatar = ({\n  src,\n  name,\n  sx,\n  ...props\n}: MessageAvatarProps) => (\n  <Avatar\n    src={src}\n    sx={{\n      width: 32,\n      height: 32,\n      border: 1,\n      borderColor: \"divider\",\n      fontSize: \"0.75rem\",\n      ...sx,\n    }}\n    {...props}\n  >\n    {!src && (name?.slice(0, 2).toUpperCase() || \"ME\")}\n  </Avatar>\n);\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-message.png",
    "category": "ai"
  }
}
