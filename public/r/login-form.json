{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-form",
  "type": "registry:block",
  "title": "Login Form",
  "description": "A simple Login Form block",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/blocks/login-form/login-form.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { TextField, Button, Typography, Box } from \"@mui/material\";\nimport { z } from \"zod\";\n\nconst loginFormSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport function LoginForm() {\n  const [pending, setPending] = React.useState(false);\n  const [state, setState] = React.useState({\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n    success: false,\n    errors: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleSubmit = React.useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      setPending(true);\n\n      const formData = new FormData(e.target as HTMLFormElement);\n      const data = Object.fromEntries(formData.entries());\n      const result = loginFormSchema.safeParse(data);\n\n      if (!result.success) {\n        setState({\n          ...state,\n          errors: Object.fromEntries(\n            Object.entries(result.error.flatten().fieldErrors).map(\n              ([key, value]) => [key, value?.[0] ?? \"\"]\n            )\n          ) as Record<keyof typeof state.errors, string>,\n        });\n        setPending(false);\n        return;\n      }\n\n      // Simulate login success\n      setState({\n        ...state,\n        success: true,\n        errors: {\n          email: \"\",\n          password: \"\",\n        },\n      });\n      setPending(false);\n    },\n    [state]\n  );\n\n  if (state.success) {\n    return (\n      <Card sx={{ maxWidth: 400, width: \"100%\" }}>\n        <CardContent>\n          <Box sx={{ textAlign: \"center\", py: 4 }}>\n            <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n              Login Successful!\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Welcome back! You have been successfully logged in.\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card sx={{ maxWidth: 400, width: \"100%\" }}>\n      <CardHeader>\n        <Typography variant=\"h5\" component=\"h1\" gutterBottom>\n          Sign In\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Enter your credentials to access your account\n        </Typography>\n      </CardHeader>\n      <CardContent>\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          sx={{ display: \"flex\", flexDirection: \"column\", gap: 3 }}\n        >\n          <TextField\n            name=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            fullWidth\n            required\n            defaultValue={state.defaultValues.email}\n            error={!!state.errors.email}\n            helperText={state.errors.email}\n            disabled={pending}\n          />\n          <TextField\n            name=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            variant=\"outlined\"\n            fullWidth\n            required\n            defaultValue={state.defaultValues.password}\n            error={!!state.errors.password}\n            helperText={state.errors.password}\n            disabled={pending}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            size=\"large\"\n            disabled={pending}\n            sx={{ mt: 2 }}\n          >\n            {pending ? \"Signing in...\" : \"Sign In\"}\n          </Button>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:block"
    }
  ]
}