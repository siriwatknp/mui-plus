{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-tool",
  "type": "registry:item",
  "title": "Ai Tool",
  "description": "A ai-tool item.",
  "dependencies": [
    "@mui/material",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ai-tool/ai-tool.demo.tsx",
      "target": "src/mui-plus/components/ai-tool/ai-tool.demo.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  Tool,\n  ToolHeader,\n  ToolContent,\n  ToolInput,\n  ToolOutput,\n} from \"./ai-tool\";\n\nexport default function AIToolDemo() {\n  const tools = [\n    {\n      type: \"tool-search_web\" as const,\n      state: \"output-available\" as const,\n      input: {\n        query: \"React 18 features\",\n        limit: 5,\n      },\n      output:\n        \"Found 5 relevant results about React 18 features including automatic batching, transitions, and suspense improvements.\",\n    },\n    {\n      type: \"tool-read_file\" as const,\n      state: \"input-available\" as const,\n      input: {\n        path: \"/src/components/Button.tsx\",\n      },\n      output: null,\n    },\n    {\n      type: \"tool-execute_code\" as const,\n      state: \"output-error\" as const,\n      input: {\n        language: \"javascript\",\n        code: \"console.log('Hello')\",\n      },\n      errorText: \"Permission denied: Cannot execute code in sandbox mode\",\n    },\n  ];\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto space-y-8 p-8\">\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Tool Components\n        </h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Display AI tool invocations with their inputs and outputs.\n        </p>\n\n        <div className=\"space-y-3\">\n          {tools.map((tool, index) => (\n            <Tool key={index} defaultOpen>\n              <ToolHeader type={tool.type} state={tool.state} />\n              <ToolContent>\n                <ToolInput input={tool.input} />\n                {(tool.output || tool.errorText) && (\n                  <ToolOutput output={tool.output} errorText={tool.errorText} />\n                )}\n              </ToolContent>\n            </Tool>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:item"
    },
    {
      "path": "components/ai-tool/ai-tool.tsx",
      "target": "src/mui-plus/components/ai-tool/ai-tool.tsx",
      "content": "\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport Collapse from \"@mui/material/Collapse\";\nimport Typography from \"@mui/material/Typography\";\nimport type { SxProps, Theme } from \"@mui/material/styles\";\nimport type { ToolUIPart } from \"ai\";\nimport {\n  CheckCircleIcon,\n  ChevronDownIcon,\n  CircleIcon,\n  ClockIcon,\n  WrenchIcon,\n  XCircleIcon,\n} from \"lucide-react\";\nimport React, { useState, type ReactNode } from \"react\";\nimport { CodeBlock } from \"../ai-code-block/ai-code-block\";\n\nexport type ToolProps = {\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n  defaultOpen?: boolean;\n};\n\nexport const Tool = ({ children, sx, defaultOpen = false }: ToolProps) => {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  return (\n    <Box\n      sx={{\n        mb: 2,\n        width: \"100%\",\n        borderRadius: 1,\n        border: 1,\n        borderColor: \"divider\",\n        ...sx,\n      }}\n    >\n      {React.Children.map(children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              isOpen,\n              onToggle: () => setIsOpen(!isOpen),\n            })\n          : child\n      )}\n    </Box>\n  );\n};\n\nexport type ToolHeaderProps = {\n  type: ToolUIPart[\"type\"];\n  state: ToolUIPart[\"state\"];\n  sx?: SxProps<Theme>;\n  isOpen?: boolean;\n  onToggle?: () => void;\n};\n\nconst getStatusBadge = (status: ToolUIPart[\"state\"]) => {\n  const labels = {\n    \"input-streaming\": \"Pending\",\n    \"input-available\": \"Running\",\n    \"output-available\": \"Completed\",\n    \"output-error\": \"Error\",\n  } as const;\n\n  const getIcon = () => {\n    switch (status) {\n      case \"input-streaming\":\n        return <CircleIcon size={14} />;\n      case \"input-available\":\n        return <ClockIcon size={14} />;\n      case \"output-available\":\n        return <CheckCircleIcon size={14} />;\n      case \"output-error\":\n        return <XCircleIcon size={14} />;\n    }\n  };\n\n  const getChipColor = (): \"default\" | \"success\" | \"error\" | \"warning\" => {\n    switch (status) {\n      case \"output-available\":\n        return \"success\";\n      case \"output-error\":\n        return \"error\";\n      case \"input-available\":\n        return \"warning\";\n      default:\n        return \"default\";\n    }\n  };\n\n  return (\n    <Chip\n      icon={getIcon()}\n      label={labels[status]}\n      size=\"small\"\n      variant=\"filled\"\n      color={getChipColor()}\n      sx={{\n        height: \"21px\",\n        borderRadius: 99,\n        fontSize: \"0.75rem\",\n        \"& .MuiChip-icon\": {\n          fontSize: 14,\n          ml: 0.5,\n          ...(status === \"input-available\" && {\n            animation: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n          }),\n        },\n        \"@keyframes pulse\": {\n          \"0%, 100%\": { opacity: 1 },\n          \"50%\": { opacity: 0.5 },\n        },\n      }}\n    />\n  );\n};\n\nexport const ToolHeader = ({\n  sx,\n  type,\n  state,\n  isOpen = false,\n  onToggle,\n}: ToolHeaderProps) => (\n  <Box\n    component=\"button\"\n    onClick={onToggle}\n    sx={{\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      gap: 2,\n      p: 1.5,\n      border: \"none\",\n      background: \"transparent\",\n      cursor: \"pointer\",\n      ...sx,\n    }}\n  >\n    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n      <Box component={WrenchIcon} size={16} sx={{ color: \"text.secondary\" }} />\n      <Typography\n        component=\"span\"\n        sx={{ fontWeight: 500, fontSize: \"0.875rem\" }}\n      >\n        {type}\n      </Typography>\n      {getStatusBadge(state)}\n    </Box>\n    <Box\n      component={ChevronDownIcon}\n      size={16}\n      sx={{\n        color: \"text.secondary\",\n        transition: \"transform 0.2s\",\n        transform: isOpen ? \"rotate(180deg)\" : \"rotate(0deg)\",\n      }}\n    />\n  </Box>\n);\n\nexport type ToolContentProps = {\n  children?: ReactNode;\n  sx?: SxProps<Theme>;\n  isOpen?: boolean;\n};\n\nexport const ToolContent = ({\n  children,\n  sx,\n  isOpen = false,\n}: ToolContentProps) => (\n  <Collapse in={isOpen}>\n    <Box sx={sx}>{children}</Box>\n  </Collapse>\n);\n\nexport type ToolInputProps = {\n  input: ToolUIPart[\"input\"];\n  sx?: SxProps<Theme>;\n};\n\nexport const ToolInput = ({ input, sx }: ToolInputProps) => (\n  <Box\n    sx={{\n      overflow: \"hidden\",\n      p: 2,\n      pt: 0,\n      ...sx,\n    }}\n  >\n    <Typography\n      variant=\"overline\"\n      sx={{\n        fontWeight: 500,\n        color: \"text.secondary\",\n        letterSpacing: 1,\n        mb: 1,\n        display: \"block\",\n      }}\n    >\n      Parameters\n    </Typography>\n    <Box\n      sx={{\n        borderRadius: 1,\n        bgcolor: \"action.hover\",\n      }}\n    >\n      <CodeBlock code={JSON.stringify(input, null, 2)} language=\"json\" />\n    </Box>\n  </Box>\n);\n\nexport type ToolOutputProps = {\n  output: ToolUIPart[\"output\"];\n  errorText: ToolUIPart[\"errorText\"];\n  sx?: SxProps<Theme>;\n};\n\nexport const ToolOutput = ({ output, errorText, sx }: ToolOutputProps) => {\n  if (!(output || errorText)) {\n    return null;\n  }\n\n  let Output = <Box>{output as ReactNode}</Box>;\n\n  if (typeof output === \"object\") {\n    Output = (\n      <CodeBlock code={JSON.stringify(output, null, 2)} language=\"json\" />\n    );\n  } else if (typeof output === \"string\") {\n    Output = <CodeBlock code={output} language=\"json\" />;\n  }\n\n  return (\n    <Box sx={{ p: 2, pt: 0, ...sx }}>\n      <Typography\n        variant=\"overline\"\n        sx={{\n          fontWeight: 500,\n          color: \"text.secondary\",\n          letterSpacing: 1,\n          mb: 1,\n          display: \"block\",\n        }}\n      >\n        {errorText ? \"Error\" : \"Result\"}\n      </Typography>\n      <Box\n        sx={{\n          overflowX: \"auto\",\n          borderRadius: 1,\n          fontSize: \"0.75rem\",\n          \"& table\": { width: \"100%\" },\n          ...(errorText\n            ? {\n                bgcolor: \"error.light\",\n                color: \"error.main\",\n                opacity: 0.1,\n              }\n            : {\n                bgcolor: \"action.hover\",\n                color: \"text.primary\",\n              }),\n        }}\n      >\n        {errorText && <Box>{errorText}</Box>}\n        {Output}\n      </Box>\n    </Box>\n  );\n};\n",
      "type": "registry:item"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/ai-tool.png",
    "category": "ai"
  }
}